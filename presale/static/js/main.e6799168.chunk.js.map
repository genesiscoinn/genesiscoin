{"version":3,"sources":["components/connectors/injected.js","App.js","reportWebVitals.js","index.js"],"names":["injected","InjectedConnector","supportedChainIds","App","contract","raiseWallet","devWallet","useState","raisedAmount","setRaisedAmount","myContribution","SetMyContribution","myToken","setMyToken","tkAmount","setTkAmount","currency","setCurrency","bnbvalue","setBNBValue","crowdsale","setCrowdsale","useWeb3React","active","account","library","activate","connector","deactivate","chainId","balance","setBalance","isPresale","setIsPresale","a","console","log","eth","Contract","Abi","utils","getBalance","fromWei","raiseBlnc","devBalance","totalRaised","parseFloat","toFixed","methods","getContribution","call","contribution","isPresaleOpen","presaleState","rate","tokenRate","blnc","swal","toWei","val","sendTransaction","from","to","value","setMethods","message","title","text","icon","buttons","dangerMode","then","willDelete","withdraw","send","claim","setBlnc","setCrowdsaleMethod","useEffect","className","src","href","target","substring","onClick","onInput","e","type","id","placeholder","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getLibrary","provider","Web3","document","getElementById"],"mappings":"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","file":"static/js/main.e6799168.chunk.js","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector'\nexport const injected = new InjectedConnector({\n  supportedChainIds: [97, 56],\n})","import { useWeb3React } from \"@web3-react/core\";\nimport { useEffect, useState } from \"react\";\nimport { injected } from \"./components/connectors/injected\";\nimport {Abi} from \"./contractAbi.json\";\nimport swal from \"sweetalert\";\n\nfunction App() {\n  \n  const contract = \"0x51FE46C321126873A4D4375b48bD51cd4c1907E3\";\n  \n  const raiseWallet = \"0x51FE46C321126873A4D4375b48bD51cd4c1907E3\";\n\n  const devWallet = \"0xcD643D2EfB9Cc4347AE280A32d61FdE4B3b1DfBf\";\n\n  const rate = 130000000000;\n\n  const [raisedAmount, setRaisedAmount] = useState(0);\n\n  const [myContribution, SetMyContribution] = useState(0);\n\n  const [myToken, setMyToken] = useState(0);\n\n  const [tkAmount, setTkAmount] = useState(0);\n\n  const [currency, setCurrency] = useState(\"N/A\");\n\n  const [bnbvalue, setBNBValue] = useState(0);\n\n  const [crowdsale, setCrowdsale] = useState({});\n\n  const { active, account, library, connector, activate, deactivate, chainId} = useWeb3React();\n  const [error, setError] = useState(\"\");\n  const [balance, setBalance] = useState(0);\n  const [value, setValue] = useState(0);\n  const [isPresale, setIsPresale] = useState(true);\n\n  async function connect(){\n    try {\n      await activate(injected);\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n\n  async function setCrowdsaleMethod(){\n    if(active){\n      const crowdsale = await new library.eth.Contract(Abi, contract);\n      \n      // var raiseBlnc = await library.utils.fromWei(await library.eth.getBalance(raiseWallet), \"ether\");\n      // var devBalance = await library.utils.fromWei(await library.eth.getBalance(devWallet), \"ether\");\n\n      var raiseBlnc = await library.utils.fromWei(await library.eth.getBalance(raiseWallet), \"ether\");\n      \n      var devBalance = await library.utils.fromWei(await library.eth.getBalance(devWallet), \"ether\");\n\n      var totalRaised = parseFloat(devBalance) + parseFloat(raiseBlnc);\n\n      (totalRaised !=0) ? setRaisedAmount(parseFloat(totalRaised).toFixed(3)):setRaisedAmount(totalRaised);\n\n      let contribution = await library.utils.fromWei(await crowdsale.methods.getContribution(account).call(),\"ether\");\n\n      SetMyContribution(contribution);\n\n      const presaleState = await crowdsale.methods.isPresaleOpen().call();\n\n      setIsPresale(presaleState);\n\n      const tokenRate = await crowdsale.methods.rate().call();\n      setMyToken((tokenRate * contribution));\n\n\n      setCrowdsale(crowdsale);\n    }\n  }\n\n\n  async function disconnect(){\n    try {\n      await deactivate();\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n\n  async function setBlnc(){\n    if(active){\n      let blnc = await library.eth.getBalance(account);\n\n      blnc = await library.utils.fromWei(blnc, 'ether');\n      if(blnc != 0){\n        setBalance(parseFloat(blnc).toFixed(3));\n      } else {\n        setBalance(blnc);\n      }\n    }\n  }\n\n  function setCurrencyMethod(){\n    if(chainId){\n      if(chainId == 1){\n        setCurrency(\"ETH\");\n      } else if(chainId == 97 || chainId == 56){\n        setCurrency(\"BNB\");\n      }\n    }\n  }\n\n  async function sendTransaction(){\n    try {            \n      if(!isPresale){\n        swal(\"\",\"Presale is closed now.\",\"error\");\n        return;\n      }\n\n      let val = await library.utils.toWei(bnbvalue, \"ether\");\n\n      await library.eth.sendTransaction({from: account, to: contract, value: val});\n\n      setMethods();\n\n      setBNBValue(0)\n\n    } catch (error) {\n      swal(\"\", error.message, 'error');\n    }\n  }\n\n  function calculateToken(){\n    let tkamount = bnbvalue * rate;\n    setTkAmount(tkamount);\n  }\n\n  async function withdraw(){\n    swal({\n      title: \"Are you sure?\",\n      text: \"Emergency withdraw will cost you 10% deduction in your total contribution.\",\n      icon: \"warning\",\n      buttons: true,\n      dangerMode: true,\n    })\n    .then(async (willDelete) => {\n      if (willDelete) {\n        try {\n          await crowdsale.methods.withdraw().send({from: account});\n          setMethods();\n        } catch (error) {\n          swal('', error.message, 'error');\n        }\n      } else {\n        swal(\"Good! You can claim your tokens.\");\n        return;\n      }\n    });\n  }\n\n  async function claim(){\n    try {\n      await crowdsale.methods.claim().send({from: account});\n      setMethods();\n    } catch (error) {\n      swal('', error.message, 'error');\n    }\n  }\n\n  function setMethods(){\n    setBlnc();\n    setCrowdsaleMethod();\n  }\n  \n  useEffect(()=>{\n    setMethods();\n    setCurrencyMethod();\n    calculateToken();\n  },[account, chainId, bnbvalue])\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <div className=\"card mt-2 col-centered presale-card\">\n            <div className=\"card-body\">\n              <div className=\"row\">\n                <div className=\"col-sm-6\">\n                  <div className=\"logo-area\">\n                      <img src=\"logo.png\" className=\"logo img-responsive\"/> <strong className=\"logo-text\">Genesis Coin Presale</strong> <span className={`badge badge-${isPresale?\"success\":\"danger\"}`}>{isPresale?\"Open\":\"Closed\"}</span>\n                  </div>\n                </div>\n                <div className=\"col-sm-6\">\n                  {\n                    active\n                      ?\n                        <div className=\"text-center\">\n                          \n                          \n                          <span className=\"account float-right\">\n\n                            <span className=\"balance\">{`${balance} ${currency}`}</span>\n                            <a className=\"white\" href={`https://bscscan.com/address/${account}`} target=\"new\">\n                              {`${account.substring(0,6)}.....${account.substring(38)}`}\n                            </a>\n                            <span className=\"close-btn\" onClick={disconnect}>X</span>\n                          </span>\n                        </div>\n                      :\n                        <button onClick={connect} className=\"connect-btn btn btn-sm btn-primary float-right\">Connect</button>\n                  }\n                </div>\n              </div>\n            </div>\n\n              {\n                account \n                  ?\n                    <div className=\"card-body form-body\">\n                      <form>\n                        <div className=\"form-group\">\n                          <span className=\"raise-amount float-right\">(Raised: {`${raisedAmount} ${currency}`})</span>\n                          <label>BNB Amount: (Min/Max: 0.02 BNB/10 BNB)</label>\n                          <input value={bnbvalue} onInput={e => setBNBValue(e.target.value)} className=\"form-control\" type=\"number\" id=\"bnb\" placeholder=\"Enter your BNB contribution\"/>\n                          {\n                            tkAmount ? <span>{tkAmount} GC</span>:''\n                          }\n                        </div>\n                        <button type=\"button\" className=\"send btn btn-primary btn-sm\" onClick={sendTransaction}>Send</button>\n                      \n                      </form>\n                     \n                    </div>\n                  :''\n              }\n              <div className=\"card-header\">\n\n                <div className=\"row\">\n                  <div className=\"col-sm-6 contract-heading\">\n                      Contract Details  \n                  </div>\n                  <div className=\"col-sm-6 contract-heading\">\n                    {\n                      active ?\n                          <span className=\"float-right\">\n                          <button className=\"btn btn-sm btn-danger\" onClick={withdraw}>Withdraw <span className=\"badge badge-warning\">{`${myContribution} ${currency}`}</span></button>\n                          &nbsp;&nbsp;\n                          <button className=\"btn btn-sm btn-info\" onClick={claim}>Claim <span className=\"badge badge-warning\">{`${parseFloat(myToken).toFixed(3)}B GC`}</span></button>\n                          </span>\n                        :''\n                    }\n                  </div>\n                </div>\n\n              </div>\n              <ul className=\"list-group list-group-flush\">\n                <li className=\"list-group-item\">Total Supply: 1000,000,000,000,000 GC</li>\n                <li className=\"list-group-item\">Tokens For Presale: 500,000,000,000,000 GC</li>\n                <li className=\"list-group-item\">Token For Liquidity: 250,000,000,000,000 GC</li>\n                <li className=\"list-group-item\">Soft Cap: 100 BNB</li>\n                <li className=\"list-group-item\">Presale Rate: 130,000,000,000 GC</li>\n                <li className=\"list-group-item\">Pancakeswap Listing Rate: 90,000,000,000 GC</li>\n                <li className=\"list-group-item\">Liquidity in Pancakeswap: 70%</li>\n                <li className=\"list-group-item\">End Time: in 30 days</li>\n              </ul>\n          </div>\n        </div>  \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Web3ReactProvider } from \"@web3-react/core\";\nimport Web3 from \"web3\";\nimport \"./styles/css/bootstrap.min.css\";\nimport \"./styles/style.css\";\n\nfunction getLibrary(provider){\n  return new Web3(provider);\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <App />\n    </Web3ReactProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}