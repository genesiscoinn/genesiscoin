{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["message","App","dapp","React","useMemo","BscDapp","window","useState","isBrowserExtensionEnabled","enabled","setEnabled","currentAddress","account","setAccount","network","setNetwork","to","amount","txHash","transferInfo","setTransferInfo","address","receiver","contractInfo","setContractInfo","sig","setSig","useEffect","onEnabled","updateNetwork","onNetworkChanged","result","onAccountChanged","browserExtensionStatus","isBscMainnet","isBscTestnet","signMessage","a","browserExtension","name","signTypedData","type","value","transfer","tx","from","parseEther","sendTransaction","execute","executeContract","abi","txParams","enableButton","isBrowserExtensionInstalled","onClick","enableBrowserExtension","accountInfo","getBalanceAndHistory","rpc","getBalance","balance","console","log","toString","explorer","getHistory","txs","networkInfo","target","href","signMessageButton","style","margin","transferForm","onChange","e","placeholder","contractForm","className","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","setTimeout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e6dce4d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\n\nimport BscDapp from '@obsidians/bsc-dapp'\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport abi from './coin.json'\n\nconst message = 'Hello Binance Smart Chain'\n\nexport default function App () {\n  const dapp = React.useMemo(() => new BscDapp(), [])\n  // const dapp = React.useMemo(() => new BscDapp({ extension: 'MetaMask' }), [])\n  // const dapp = React.useMemo(() => new BscDapp({ extension: 'BinanceChainWallet' }), [])\n  window.dapp = dapp\n\n  const [enabled, setEnabled] = React.useState(dapp.isBrowserExtensionEnabled)\n  const [account, setAccount] = React.useState(dapp.currentAddress)\n  const [network, setNetwork] = React.useState()\n  const [transferInfo, setTransferInfo] = React.useState({\n    to: '0x987ffbf3f7cdabb38782b9886d257ce74f338da5',\n    amount: '0.01',\n    txHash: ''\n  })\n  const [contractInfo, setContractInfo] = React.useState({\n    address: '0x33530bb5d7b912e01eb7cc1a27d69dd078cee03a',\n    receiver: '0xd0cda47a263859316febc1eb29a65517ab22926a',\n    amount: '1000',\n    txHash: ''\n  })\n  const [sig, setSig] = React.useState('')\n\n  React.useEffect(() => dapp.onEnabled(account => {\n    setEnabled(true)\n    setAccount(account)\n    updateNetwork(dapp.network)\n  }), [])\n\n  React.useEffect(() => dapp.onNetworkChanged(result => {\n    updateNetwork(result)\n  }), [])\n\n\n  React.useEffect(() => dapp.onAccountChanged(account => {\n    setAccount(account)\n  }), [])\n\n  const updateNetwork = (network = {}) => {\n    if (network.isBscMainnet) {\n      setNetwork('Mainnet')\n    } else if (network.isBscTestnet) {\n      setNetwork('Testnet')\n    } else {\n      setNetwork()\n    }\n  }\n\n  const signMessage = async () => {\n    let sig\n    if (dapp.browserExtension.name === 'MetaMask') {\n      // Ref EIP-712, sign data that has a structure\n      sig = await dapp.signTypedData([{ type: 'string', name: 'Message', value: message }])\n    } else {\n      // Binance Chain Wallet doesn't support signTypedData yet\n      sig = await dapp.signMessage(message)\n    }\n    setSig(sig)\n  }\n\n  const transfer = async (to, amount) => {\n    const tx = {\n      from: account.address,\n      to,\n      value: dapp.parseEther(amount),\n    };\n    const txHash = await dapp.sendTransaction(tx)\n    setTransferInfo({ ...transferInfo, txHash })\n  }\n\n  const execute = async () => {\n    const { address, receiver, amount } = contractInfo\n    const txParams = await dapp.executeContract({ address, abi }, 'mint', [receiver, amount])\n    const txHash = await dapp.sendTransaction({\n      from: account.address,\n      value: dapp.parseEther('0'),\n      ...txParams,\n    })\n    setContractInfo({ ...contractInfo, txHash })\n  }\n\n  let browserExtensionStatus\n  let enableButton = null\n  if (dapp.isBrowserExtensionInstalled) {\n    browserExtensionStatus = `${dapp.browserExtension.name} Detected. ${enabled ? 'Enabled.' : 'Not enabled'}`\n    if (!enabled) {\n      enableButton = (\n        <button onClick={() => dapp.enableBrowserExtension()}>\n          Enable {dapp.browserExtension.name}\n        </button>\n      )\n    }\n  } else {\n    browserExtensionStatus = 'No Browser Extension detected'\n  }\n\n  let accountInfo = null\n  if (enabled && account) {\n    accountInfo = (\n      <div>\n        Current account: <small><code>{account.address}</code></small>\n        <button onClick={() => getBalanceAndHistory()}>Get Balance and History</button>\n      </div>\n    )\n  }\n\n  const getBalanceAndHistory = async () => {\n    const balance = await dapp.rpc.getBalance(account.address)\n    console.log('Balance:', balance.toString())\n\n    const txs = await dapp.explorer.getHistory(account.address)\n    console.log('TX History:', txs)\n  }\n\n  let networkInfo = null\n  if (enabled) {\n    if (network) {\n      networkInfo = <p>Network: BSC {network}</p>\n    } else {\n      networkInfo = <p>Not connected to BSC Mainnet (<a target='_black' href='https://docs.binance.org/smart-chain/wallet/metamask.html'>Use BSC with Metamask</a>)</p>\n    }\n  }\n\n  let signMessageButton = null\n  if (enabled && network) {\n    signMessageButton = <div style={{ margin: '20px 0'}}>\n      <div>message: <small><code>{message}</code></small></div>\n      <div>signature: <small><code>{sig}</code></small></div>\n      {!sig && <button onClick={() => signMessage()}>Sign Message</button>}\n    </div>\n  }\n\n  let transferForm = null\n  if (enabled && network) {\n    transferForm = <div style={{ margin: '20px 0' }}>\n      <div>\n        Transfer\n      </div>\n      to:\n      <input\n        value={transferInfo.to}\n        onChange={(e) => setTransferInfo({ ...transferInfo, to: e.target.value })}\n        placeholder=\"Transfer to\"\n      />\n      <br />\n      amount:\n      <input\n        value={transferInfo.amount}\n        onChange={(e) => setTransferInfo({ ...transferInfo, amount: e.target.value })}\n        placeholder=\"Transfer amount\"\n      />\n      <br />\n      <button onClick={() => transfer(transferInfo.to, transferInfo.amount)}>Transfer</button>\n      {\n        !!transferInfo.txHash &&\n        <div>{transferInfo.txHash}</div>\n      }\n    </div>\n  }\n\n  let contractForm = null\n  if (enabled && network) {\n    contractForm = <div style={{ margin: '20px 0' }}>\n      <div>\n        Contract\n      </div>\n      contract:\n      <input\n        value={contractInfo.address}\n        onChange={(e) => setContractInfo({ ...contractInfo, address: e.target.value })}\n        placeholder=\"Contract Address\"\n      />\n      <br />\n      method: mint\n      <br />\n      param1 (receiver):\n      <input\n        value={contractInfo.receiver}\n        onChange={(e) => setContractInfo({ ...contractInfo, receiver: e.target.value })}\n        placeholder=\"Receiver\"\n      />\n      <br />\n      param2 (amount):\n      <input\n        value={contractInfo.amount}\n        onChange={(e) => setContractInfo({ ...contractInfo, amount: e.target.value })}\n        placeholder=\"Amount\"\n      />\n      <br />\n      <button onClick={() => execute()}>Execute</button>\n      {\n        !!contractInfo.txHash &&\n        <div>{contractInfo.txHash}</div>\n      }\n    </div>\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>{browserExtensionStatus}</p>\n        {enableButton}\n        {accountInfo}\n        {networkInfo}\n        {signMessageButton}\n        {transferForm}\n        {contractForm}\n      </header>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nsetTimeout(() => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}, 500)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}