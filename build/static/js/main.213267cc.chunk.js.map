{"version":3,"sources":["components/connectors/injected.js","App.js","reportWebVitals.js","index.js"],"names":["injected","InjectedConnector","supportedChainIds","App","contract","raiseWallet","useState","raisedAmount","setRaisedAmount","myContribution","SetMyContribution","tkAmount","setTkAmount","currency","setCurrency","bnbvalue","setBNBValue","crowdsale","setCrowdsale","useWeb3React","active","account","library","activate","connector","chainId","deactivate","balance","setBalance","a","console","log","eth","Contract","Abi","utils","getBalance","fromWei","raiseBlnc","parseFloat","toFixed","methods","getContribution","call","setBlnc","blnc","toWei","val","sendTransaction","from","to","value","swal","message","title","text","icon","buttons","dangerMode","then","willDelete","withdraw","send","useEffect","setCrowdsaleMethod","className","src","href","target","substring","onClick","onInput","e","type","id","placeholder","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getLibrary","provider","Web3","document","getElementById"],"mappings":"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","file":"static/js/main.213267cc.chunk.js","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector'\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 97, 56],\n})","import { useWeb3React } from \"@web3-react/core\";\nimport { useEffect, useState } from \"react\";\nimport { injected } from \"./components/connectors/injected\";\nimport {Abi} from \"./contractAbi.json\";\nimport swal from \"sweetalert\";\n\nfunction App() {\n  \n  const contract = \"0xEEECC1470573881a147B856d6294d7AB20C7E26C\";\n  \n  const raiseWallet = \"0xEEECC1470573881a147B856d6294d7AB20C7E26C\";\n\n  const hardCap = 7000;\n\n  const rate = 120000000000;\n\n  const [raisedAmount, setRaisedAmount] = useState(0);\n\n  const [myContribution, SetMyContribution] = useState(0);\n\n  const [tkAmount, setTkAmount] = useState(0);\n\n  const [currency, setCurrency] = useState(\"N/A\");\n\n  const [bnbvalue, setBNBValue] = useState(0);\n\n  const [crowdsale, setCrowdsale] = useState({});\n\n  const { active, account, library, connector, activate, deactivate, chainId} = useWeb3React();\n  const [error, setError] = useState(\"\");\n  const [balance, setBalance] = useState(0);\n  const [value, setValue] = useState(0);\n\n  async function connect(){\n    try {\n      await activate(injected);\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n\n  async function setCrowdsaleMethod(){\n    if(active){\n      const crowdsale = await new library.eth.Contract(Abi, contract);\n      \n      var raiseBlnc = await library.utils.fromWei(await library.eth.getBalance(raiseWallet), \"ether\");\n\n      (raiseBlnc!=0) ? setRaisedAmount(parseFloat(raiseBlnc).toFixed(3)):setRaisedAmount(raiseBlnc);\n\n      SetMyContribution(await library.utils.fromWei(await crowdsale.methods.getContribution(account).call()), \"ether\");\n\n      setCrowdsale(crowdsale);\n    }\n  }\n\n  async function disconnect(){\n    try {\n      await deactivate();\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n\n  async function setBlnc(){\n    if(active){\n      let blnc = await library.eth.getBalance(account);\n\n      blnc = await library.utils.fromWei(blnc, 'ether');\n      if(blnc != 0){\n        setBalance(parseFloat(blnc).toFixed(3));\n      } else {\n        setBalance(blnc);\n      }\n    }\n  }\n\n  function setCurrencyMethod(){\n    if(chainId){\n      if(chainId == 1){\n        setCurrency(\"ETH\");\n      } else if(chainId == 97 || chainId == 56){\n        setCurrency(\"BNB\");\n      }\n    }\n  }\n\n  async function sendTransaction(){\n    try {            \n      let val = await library.utils.toWei(bnbvalue, \"ether\");\n\n      await library.eth.sendTransaction({from: account, to: contract, value: val});\n      setBlnc();\n    } catch (error) {\n      swal(\"\", error.message, 'error');\n    }\n  }\n\n  function calculateToken(){\n    let tkamount = bnbvalue * rate;\n    setTkAmount(tkamount);\n  }\n\n  async function withdraw(){\n    swal({\n      title: \"Are you sure?\",\n      text: \"Emergency withdraw will cost you 10% deduction in your total contribution.\",\n      icon: \"warning\",\n      buttons: true,\n      dangerMode: true,\n    })\n    .then(async (willDelete) => {\n      if (willDelete) {\n        try {\n          await crowdsale.methods.withdraw().send({from: account});\n          setBlnc();\n        } catch (error) {\n          swal('', error.message, 'error');\n        }\n      } else {\n        swal(\"Good! You can claim your tokens.\");\n        return;\n      }\n    });\n  }\n\n  useEffect(()=>{\n    setBlnc();\n    setCurrencyMethod();\n    calculateToken();\n    setCrowdsaleMethod();\n  },[account, chainId, bnbvalue])\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <div className=\"card mt-2 col-centered presale-card\">\n            <div className=\"card-body\">\n              <div className=\"row\">\n                <div className=\"col-sm-6\">\n                  <div className=\"logo-area\">\n                      <img src=\"logo.png\" className=\"logo img-responsive\"/> <strong className=\"logo-text\">Genesis Coin Presale</strong>\n                  </div>\n                </div>\n                <div className=\"col-sm-6\">\n                  {\n                    active\n                      ?\n                        <div className=\"text-center\">\n                          <span className=\"account float-right\">\n\n                              <span className=\"balance\">{`${balance} ${currency}`}</span>\n                            <a className=\"white\" href={`https://testnet.bscscan.com/address/${account}`} target=\"new\">\n                              {`${account.substring(0,6)}.....${account.substring(38)}`}\n                            </a>\n                          </span>\n                        </div>\n                      :\n                        <button onClick={connect} className=\"connect-btn btn btn-sm btn-primary float-right\">Connect</button>\n                  }\n                </div>\n              </div>\n            </div>\n\n              {\n                account \n                  ?\n                    <div className=\"card-body form-body\">\n                      <form>\n                        <div className=\"form-group\">\n                          <span className=\"raise-amount float-right\">(Raised: {`${raisedAmount} / ${hardCap} ${currency}`})</span>\n                          <label>BNB Amount:</label>\n                          <input value={bnbvalue} onInput={e => setBNBValue(e.target.value)} className=\"form-control\" type=\"number\" id=\"bnb\" placeholder=\"Enter your BNB contribution\"/>\n                          {\n                            tkAmount ? <span>{tkAmount}</span>:''\n                          }\n                        </div>\n                        <button type=\"button\" className=\"send btn btn-primary btn-sm\" onClick={sendTransaction}>Send</button>\n                      \n                      </form>\n                     \n                    </div>\n                  :''\n              }\n              <div className=\"card-header\">\n\n                <div className=\"row\">\n                  <div className=\"col-sm-6 contract-heading\">\n                      Contract Details  \n                  </div>\n                  <div className=\"col-sm-6 contract-heading\">\n                    {\n                      active ?\n                          <span className=\"float-right\">\n                          <button className=\"btn btn-sm btn-danger\" onClick={withdraw}>Withdraw <span className=\"badge badge-warning\">{`${myContribution} ${currency}`}</span></button>\n                          </span>\n                        :''\n                    }\n                  </div>\n                </div>\n\n              </div>\n              <ul className=\"list-group list-group-flush\">\n                <li className=\"list-group-item\">Total Supply: 1000,000,000,000,000</li>\n                <li className=\"list-group-item\">Tokens For Presale: 300,000,000,000,000</li>\n                <li className=\"list-group-item\">Token For Liquidity: 200,000,000,000,000</li>\n                <li className=\"list-group-item\">Soft Cap: 100 BNB</li>\n                <li className=\"list-group-item\">Hard Cap: 7000 BNB</li>\n                <li className=\"list-group-item\">Presale Rate: 100,000,000,000</li>\n                <li className=\"list-group-item\">Pancakeswap Listing Rate: 90,000,000,000</li>\n                <li className=\"list-group-item\"></li>\n                <li className=\"list-group-item\"></li>\n                <li className=\"list-group-item\"></li>\n                <li className=\"list-group-item\"></li>\n                {/* <li class=\"list-group-item\"></li> */}\n              </ul>\n          </div>\n        </div>  \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Web3ReactProvider } from \"@web3-react/core\";\nimport Web3 from \"web3\";\nimport \"./styles/css/bootstrap.min.css\";\nimport \"./styles/style.css\";\n\nfunction getLibrary(provider){\n  return new Web3(provider);\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <App />\n    </Web3ReactProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}