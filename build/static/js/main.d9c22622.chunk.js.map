{"version":3,"sources":["logo.svg","components/connectors/injected.js","App.js","reportWebVitals.js","index.js"],"names":["injected","InjectedConnector","supportedChainIds","App","useWeb3React","active","account","library","activate","connector","a","console","log","disconnect","eth","sendTransaction","from","to","value","deactivate","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getLibrary","provider","Web3","document","getElementById"],"mappings":"+hBAAe,I,cCCFA,EAAW,I,OAAIC,GAAkB,CAC5CC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,GAAG,M,QC4CtBC,MAzCf,WAAgB,IAAD,EAEyDC,cAA9DC,EAFK,EAELA,OAAQC,EAFH,EAEGA,QAASC,EAFZ,EAEYA,QAAoBC,GAFhC,EAEqBC,UAFrB,EAEgCD,UAFhC,4CAKb,sBAAAE,EAAA,+EAEUF,EAASR,GAFnB,sDAIIW,QAAQC,IAAI,QAAZ,MAJJ,yDALa,+BAaEC,IAbF,2EAab,sBAAAH,EAAA,+EAEUG,IAFV,sDAIIF,QAAQC,IAAI,QAAZ,MAJJ,yDAba,kEAqBb,sBAAAF,EAAA,+EAGUH,EAAQO,IAAIC,gBAAgB,CAACC,KAAMV,EAASW,GAAG,6CAA8CC,MAAM,OAH7G,sDAKIP,QAAQC,IAAI,QAAZ,MALJ,yDArBa,sBA8Bb,OA9Ba,EAE0CO,WACrCf,cA4BhB,sBAAKgB,UAAU,MAAf,UACE,wBAAQC,QAhCC,2CAgCT,qBACChB,EAAS,+BAAOC,IAAgB,iDACjC,wBAAQe,QAASR,EAAjB,wBACA,uBACA,wBAAQQ,QApCC,2CAoCT,sBC7BSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,kBCKdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAmBC,WANvB,SAAoBC,GAClB,OAAO,IAAIC,IAAKD,IAKd,SACE,cAAC,EAAD,QAGJE,SAASC,eAAe,SAM1BhB,M","file":"static/js/main.d9c22622.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { InjectedConnector } from '@web3-react/injected-connector'\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42,97],\n})","import logo from './logo.svg';\nimport './App.css';\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"./components/connectors/injected\";\n\nfunction App() {\n  \n  const { active, account, library, connector, activate, deactivate } = useWeb3React();\n  const web3React = useWeb3React();\n\n  async function connect(){\n    try {\n      await activate(injected);\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n\n  async function disconnect(){\n    try {\n      await disconnect();\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n\n  async function sendTransaction(){\n    try {\n      // await library.send(\"0x4eC3f3eCBc38bb58F0045C9dfa50030662DF5812\", 1);\n      await library.eth.sendTransaction({from: account, to:\"0x4eC3f3eCBc38bb58F0045C9dfa50030662DF5812\", value:1000000000000000000});\n    } catch (error) {\n      console.log(\"error\", error)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <button onClick={connect}>Connect</button>\n      {active ? <span>{account}</span>:<span>Not connected</span>}\n      <button onClick={disconnect}>Disconnect</button>\n      <br/>\n      <button onClick={sendTransaction}>Send</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Web3ReactProvider } from \"@web3-react/core\";\nimport Web3 from \"web3\";\n\nfunction getLibrary(provider){\n  return new Web3(provider);\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <App />\n    </Web3ReactProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}